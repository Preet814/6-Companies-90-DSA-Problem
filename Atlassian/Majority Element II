Problem : Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:
Input: nums = [3,2,3]
Output: [3]

Solution :

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        // using extra space
        // vector<int> ans;
        // unordered_map<int,int> mp;
        // for(int i=0;i<nums.size();i++){
        //     mp[nums[i]]++;
        // }
        // for(auto it:mp){
        //     if(it.second>nums.size()/3)
        //         ans.push_back(it.first);
        // }
        // return ans;

        // using less space
        vector<int> ans;
        int cnt1=0,cnt2=0,element1=0,element2=0;
        for(int i=0;i<nums.size();i++){
            if(cnt1==0 && nums[i]!=element2){
                element1=nums[i];
                cnt1=1;
            }
            else if(cnt2==0 && nums[i]!=element1){
                element2=nums[i];
                cnt2=1;
            }
            else if(nums[i]==element1)
                cnt1++;
            else if(nums[i]==element2)
                cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        cnt1=0,cnt2=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==element1)
                cnt1++;
            else if(nums[i]==element2)
                cnt2++;
        }
        int val=nums.size()/3;
        if(cnt1>val)
            ans.push_back(element1);
        if(cnt2>val)
            ans.push_back(element2);        
        return ans;
    }
};
