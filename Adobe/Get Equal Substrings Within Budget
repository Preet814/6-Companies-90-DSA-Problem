Problem : You are given two strings s and t of the same length and an integer maxCost.
          You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the 
          ASCII values of the characters).
          Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or 
          equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.
          
          Example 1:
          Input: s = "abcd", t = "bcdf", maxCost = 3
          Output: 3
          Explanation: "abc" of s can change to "bcd".
          That costs 3, so the maximum length is 3.

Solution : 

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int n=s.length();
        int i=0,curr_cost=0;
        int maxi=0;
        // sliding window approach
        for(int j=0;j<n;j++){
            curr_cost+=abs(s[j]-t[j]);
            // if curr_cost > maxCost removal of ith char and also its abs diff from curr_cost
            if(i<=j && curr_cost>maxCost){
                curr_cost-=abs(s[i]-t[i]);
                i++;
            }
            // maxi is updated acc to size of window which contains char diff less than maxCost
            maxi=max(maxi,j-i+1);
        }
        return maxi;
    }
};
