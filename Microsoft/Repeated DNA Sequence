Problem : The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.
          For example, "ACGAATTCCG" is a DNA sequence.
          When studying DNA, it is useful to identify repeated sequences within the DNA.
          Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that 
          occur more than once in a DNA molecule. You may return the answer in any order.
          
          Example 1:
          Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
          Output: ["AAAAACCCCC","CCCCCAAAAA"]
          
          Example 2:
          Input: s = "AAAAAAAAAAAAA"
          Output: ["AAAAAAAAAA"]

Solution : 

vector<string> findRepeatedDnaSequences(string s) {
        vector<string> ans;
        int n=s.size();
        int i=0,j=0;
        string str="";
        unordered_map<string,int> mp;
        // input be s="AAAAAAAAAAAAA" - 13 times
        while(i<n){
            if(str.length()<10 && j<n){
                str+=s[j];
                j++;
            }
            else if(str.length()>=10){
                ans.push_back(str);
                str.erase(str.begin());
                i++;
            }
            else{
                break;
            }
        } 
        // after this while loop we get ans array of string as
        // [[AAAAAAAAAA],[AAAAAAAAAA],[AAAAAAAAAA],[AAAAAAAAAA]]
        for(int i=0;i<ans.size();i++){
            mp[ans[i]]++;
        }
        // we can do mapping of string as key=string and value in integer
        // mp[AAAAAAAAAA]=4
        vector<string> res;
        for(auto it:mp){
            if(it.second>=2){
                res.push_back(it.first);
            }
        }
        // res vector of string will contain string AAAAAAAAAA
        return res;
    }
