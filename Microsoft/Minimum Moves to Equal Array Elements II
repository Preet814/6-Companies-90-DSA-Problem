Problem : Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
          In one move, you can increment or decrement an element of the array by 1.
          Test cases are designed so that the answer will fit in a 32-bit integer.
          
          Example 1:
          Input: nums = [1,2,3]
          Output: 2
          Explanation:
          Only two moves are needed (remember each move increments or decrements one element):
          [1,2,3]  =>  [2,2,3]  =>  [2,2,2]

Solution : 

int minMoves2(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        // after sort we find the mid element
        int mid=nums.size()/2;
        int ans=0;
        // now if every element in array is subtracted from mid we get that 
        // how much steps each element need to become like mid element
        // we will add all of them and get the result 
        for(int i=0;i<nums.size();i++){
            ans+=abs(nums[mid]-nums[i]);
        }
        return ans; 
    }
