Problem : You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.
          Each minute, a node becomes infected if:
          The node is currently uninfected.
          The node is adjacent to an infected node.
          Return the number of minutes needed for the entire tree to be infected.
          
          Example 1:
          Input: root = [1,5,3,null,4,10,6,9,2], start = 3
          Output: 4
          Explanation: The following nodes are infected during:
          - Minute 0: Node 3
          - Minute 1: Nodes 1, 10 and 6
          - Minute 2: Node 5
          - Minute 3: Node 4
          - Minute 4: Nodes 9 and 2
          It takes 4 minutes for the whole tree to be infected so we return 4.

Solution : 

class Solution {
public:
    TreeNode* createMapping(TreeNode* root, int start,map<TreeNode*,TreeNode*>& nodeToParent){
        TreeNode* ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();
            if(node->val==start){
                ans=node;
            }
            if(node->left){
                nodeToParent[node->left]=node;
                q.push(node->left);
            }
            if(node->right){
                nodeToParent[node->right]=node;
                q.push(node->right);
            }
        }
        return ans;
    }
    int burnTree(map<TreeNode*,TreeNode*> nodeToParent,TreeNode* start){
        int cnt=0;
        queue<TreeNode*> q;
        map<TreeNode*,bool> visited;
        q.push(start);
        visited[start]=true;
        while(!q.empty()){
            int size=q.size();
            int flag=0;
            for(int i=0;i<size;i++){
                TreeNode* node=q.front();
                q.pop();
                if(node->left && !visited[node->left]){
                    q.push(node->left);
                    visited[node->left]=true;
                    flag=1;
                }
                if(node->right && !visited[node->right]){
                    q.push(node->right);
                    visited[node->right]=true;
                    flag=1;
                }
                if(nodeToParent[node] && !visited[nodeToParent[node]]){
                    q.push(nodeToParent[node]);
                    visited[nodeToParent[node]]=true;
                    flag=1;
                }
            }
            if(flag==1){
                cnt++;
            }
        }
        return cnt;
    }
    int amountOfTime(TreeNode* root, int start) { 
        map<TreeNode*,TreeNode*> nodeToParent;
        TreeNode* targetStart=createMapping(root,start,nodeToParent);
        return burnTree(nodeToParent,targetStart);

    }
};
