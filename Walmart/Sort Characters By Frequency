Problem : Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character 
          is the number of times it appears in the string.
          Return the sorted string. If there are multiple answers, return any of them.
          
          Example 1:
          Input: s = "tree"
          Output: "eert"
          Explanation: 'e' appears twice while 'r' and 't' both appear once.
          So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Solution : 

class Solution {
public:
    static bool cmp(pair<int, char>& a, pair<int, char>& b){
        if(a.first==b.first)
            return a.second<b.second;
        else
            return a.first>b.first;
    }
    string frequencySort(string s) {
        unordered_map<char,int> mp;
        string ans="";
        for(int i=0;i<s.length();i++){
            mp[s[i]]++;
        }
        vector<pair<int,char>> vec;
        for(auto it:mp){
            vec.push_back({it.second,it.first});
        }
        sort(vec.begin(),vec.end(),cmp);
        for(int i=0;i<vec.size();i++){
            int k=vec[i].first;
            while(k!=0){
                ans+=vec[i].second;
                k--;
            }
        }
        return ans;
    }
};
