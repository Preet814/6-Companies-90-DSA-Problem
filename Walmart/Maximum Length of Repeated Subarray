Problem : Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

          Example 1:
          Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
          Output: 3
          Explanation: The repeated subarray with maximum length is [3,2,1].

Solution :

class Solution {
public:
    int solve(int n,int m,vector<int>& nums1, vector<int>& nums2,vector<vector<int>>& dp){
        if(n==0 || m==0) 
            return 0;
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(nums1[n-1]==nums2[m-1]){
            return dp[n][m]=1+solve(n-1,m-1,nums1, nums2,dp);
        }
        return 0;
    }
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size();
        int m=nums2.size();
        int ans=0;
        // vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         int res= solve(i,j,nums1, nums2,dp);
        //         ans=max(ans, res);
        //     }
        // }
        // return ans;

        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(nums1[i-1]==nums2[j-1]){
        //             dp[i][j]=1+dp[i-1][j-1];
        //             ans=max(ans,dp[i][j]);
        //         }
        //         else
        //             dp[i][j]=0;
        //     }
        // }
        // return ans;

        vector<int> curr(m+1,0);
        vector<int> prev(m+1,0);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1]){
                    curr[j]=1+prev[j-1];
                    ans=max(ans,curr[j]);
                }
                else
                    curr[j]=0;
            }
            prev=curr;
        }
        return ans;
    }
};
