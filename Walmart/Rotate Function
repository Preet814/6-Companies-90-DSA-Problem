Problem : You are given an integer array nums of length n.
          Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F 
          on nums as follow:
          F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
          Return the maximum value of F(0), F(1), ..., F(n-1).
          The test cases are generated so that the answer fits in a 32-bit integer.
          
          Example 1:
          Input: nums = [4,3,2,6]
          Output: 26
          Explanation:
          F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
          F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
          F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
          F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
          So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.

Solution : 

int maxRotateFunction(vector<int>& nums) {
        // eg- A = [4, 3, 2, 6]

        // F(0) = 0A + 1B + 2C +3D
        // F(1) = 0D + 1A + 2B +3C
        // F(2) = 0C + 1D + 2A +3B
        // F(3) = 0B + 1C + 2D +3A
        // sum = 1A + 1B + 1C + 1D
        // F(1)-F(0) = a+b+c-3d
        // = a+b+c+d - 4d
        // = sum - n * Bk[0];
        // F(1) = F(0) + sum - n*Bk[0]

        // Similarly,
        // F(1) = F(0) + sum - 4D
        // F(2) = F(1) + sum - 4C
        // F(3) = F(2) + sum - 4B
        // So,
        // F(k) = F(k-1) + sum - nBk[0]

        int sum=0,prod=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            prod+=(nums[i]*i);
        }
        int maxi=prod;
        for(int i=nums.size()-1;i>0;i--){
            prod=prod+sum-nums.size()*nums[i];
            maxi=max(maxi,prod);
        }
        return maxi;
    }
