Problem : You are given a positive integer 0-indexed array nums.
          A subset of the array nums is square-free if the product of its elements is a square-free integer.
          A square-free integer is an integer that is divisible by no square number other than 1.
          Return the number of square-free non-empty subsets of the array nums. Since the answer may be 
          too large, return it modulo 109 + 7.
          A non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) 
          elements from nums. Two subsets are different if and only if the chosen indices to delete are different.
          
          Example 1:
          Input: nums = [3,4,4,5]
          Output: 3
          Explanation: There are 3 square-free subsets in this example:
          - The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.
          - The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.
          - The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.
          It can be proven that there are no more than 3 square-free subsets in the given array.

Solution : 

class Solution {
    int MOD = 1000000007;
    int primeFactors[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
public:
    int squareFreeSubsets(vector<int>& nums) {
        vector<int> squareFreeBitmaps;
        // Create a vector of bitmaps for square-free numbers
        for (int num : nums) {
            if (isSquareFree(num)) {
                squareFreeBitmaps.push_back(convertToBitmap(num));
            }
        }

        // Initialize memoization table for dynamic programming
        vector<vector<int>> dp(squareFreeBitmaps.size() + 1,vector<int>(1 << 10, -1));

        // Start the recursive function to count subsets
        return countSubsets(0, 0, dp, squareFreeBitmaps);
    }

    // Recursive function to count subsets using bitmasking
    int countSubsets(int idx, int bitmask,vector<vector<int>>& dp,vector<int>& squareFreeBitmaps) {
        if (idx >= squareFreeBitmaps.size()) {
            return 0;
        }

        // If the result is already memoized, return it
        if (dp[idx][bitmask] >= 0) {
            return dp[idx][bitmask];
        }

        // Current square-free bitmap
        int currentBitmap = squareFreeBitmaps[idx];
        // Count subsets without including the current bitmap
        int count = countSubsets(idx + 1, bitmask, dp, squareFreeBitmaps);

        // If the current bitmap is not overlapping with the existing ones, include it
        if ((bitmask & currentBitmap) == 0) {
            count = (count + 1 + countSubsets(idx + 1, bitmask | currentBitmap, dp, squareFreeBitmaps)) % MOD;
        }

        // Memoize the result and return
        dp[idx][bitmask] = count;
        return count;
    }

    // Convert a number to a bitmap based on its prime factors
    int convertToBitmap(int num) {
        int bitmap = 0;
        for (int i = 0; i < 10; ++i) {
            if (num % primeFactors[i] == 0) {
                bitmap += 1 << i;
            }
        }
        return bitmap;
    }

    // Check if a number is square-free
    bool isSquareFree(int num) {
        for (int pf : primeFactors) {
            if (num % (pf * pf) == 0) {
                return false;
            }
        }
        return true;
    }
};
